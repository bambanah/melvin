generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  access_token       String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  name          String?
  emailVerified DateTime?
  image         String?
  abn           BigInt?
  bankName      String?
  bankNumber    BigInt?
  bsb           Int?

  defaultSupportItemId      String?
  defaultSupportItem        SupportItem? @relation("defaultSupportItem", fields: [defaultSupportItemId], references: [id], onDelete: SetNull)
  defaultGroupSupportItemId String?
  defaultGroupSupportItem   SupportItem? @relation("defaultGroupSupportItem", fields: [defaultGroupSupportItemId], references: [id], onDelete: SetNull)

  account          Account?
  sessions         Session[]
  clients          Client[]
  invoices         Invoice[]
  supportItems     SupportItem[]
  activities       Activity[]
  supportItemRates SupportItemRates[]

  @@index([defaultSupportItemId])
  @@index([defaultGroupSupportItemId])
}

model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created")
  updatedAt DateTime @default(now()) @updatedAt

  name         String
  number       String?
  invoiceEmail String?

  defaultTransitDistance Decimal?
  defaultTransitTime     Decimal?

  billTo              String?
  invoiceNumberPrefix String?
  ownerId             String
  invoices            Invoice[]
  activities          Activity[]
  owner               User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  supportItemRates    SupportItemRates[]

  @@index([ownerId])
}

model Invoice {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now()) @map("created")
  updatedAt  DateTime      @default(now()) @updatedAt
  sentAt     DateTime?
  paidAt     DateTime?
  invoiceNo  String
  billTo     String?
  date       DateTime
  status     InvoiceStatus @default(CREATED)
  clientId   String
  ownerId    String
  activities Activity[]
  client     Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  owner      User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([ownerId])
}

model Activity {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now()) @map("created")
  updatedAt       DateTime    @default(now()) @updatedAt
  date            DateTime    @db.Date
  startTime       DateTime?   @db.Time(6)
  endTime         DateTime?   @db.Time(6)
  transitDuration Decimal?
  transitDistance Decimal?
  itemDistance    Int?
  ownerId         String?
  clientId        String?
  supportItemId   String
  invoiceId       String?
  owner           User?       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  client          Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  supportItem     SupportItem @relation(fields: [supportItemId], references: [id], onDelete: Cascade)
  invoice         Invoice?    @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@index([ownerId])
  @@index([clientId])
  @@index([supportItemId])
  @@index([invoiceId])
}

model SupportItem {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now()) @map("created")
  updatedAt            DateTime           @default(now()) @updatedAt
  description          String
  rateType             RateType           @default(HOUR)
  isGroup              Boolean?
  weekdayCode          String
  weeknightCode        String?
  saturdayCode         String?
  sundayCode           String?
  weekdayRate          Decimal
  weeknightRate        Decimal?
  saturdayRate         Decimal?
  sundayRate           Decimal?
  ownerId              String
  activities           Activity[]
  owner                User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  supportItemRates     SupportItemRates[]
  defaultForUsers      User[]             @relation("defaultSupportItem")
  defaultGroupForUsers User[]             @relation("defaultGroupSupportItem")

  @@index([ownerId])
}

model SupportItemRates {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  supportItemId String
  supportItem   SupportItem @relation(fields: [supportItemId], references: [id], onDelete: Cascade)

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  weekdayRate   Decimal?
  weeknightRate Decimal?
  saturdayRate  Decimal?
  sundayRate    Decimal?

  @@index([supportItemId])
  @@index([ownerId])
  @@index([clientId])
}

enum InvoiceStatus {
  CREATED
  SENT
  PAID
}

enum RateType {
  KM
  HOUR
}
